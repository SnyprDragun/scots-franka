%
% dcdc.m
%
% created: Jan 2017
%  author: Matthias Rungger
%
% see readme file for more information on the safety example
%
% you need to 1. have the mexfiles compiled 
%             2. run the ./dcdc binary first 
%
% so that the file: controller.scs is created
%


clear set
close all

%% simulation

% initial state
x0=[3.5 0];
tau_s=0.3;

% load controller from file generated by SCOTS
%controller=StaticController('controller');

% simulate closed loop system
y=x0;
v=[];
loop=100;
while(loop>0)
	loop=loop-1;

  %-------------here choosing control input for current state-------------%   
  %u=controller.control(y(end,:));
  %in=u(end,:);
  in=0;
  % you change above input "in" as you want! currently I choose 0! Here is the place your control logic will appear 
  
  %-----solving ordinary differential equation using runga-kutta oreder 4-----%
  v=[v; in];
  [t x]=ode45(@unicycle_ode,[0 tau_s], y(end,:), odeset('abstol',1e-10,'reltol',1e-10),in);

  y=[y; x(end,:)];
end


% %% plot the vehicle domain
% % colors
colors=get(groot,'DefaultAxesColorOrder');
% 
% % plot controller domain
% figure(1)
% dom=controller.domain;
% plot(dom(:,1),dom(:,2),'.','color',0.6*ones(3,1))

figure()
% plot initial state  and trajectory
plot(y(:,1),y(:,2),'k.-')
hold on
plot(y(1,1),y(1,2),'.','color',colors(5,:),'markersize',20)


function dxdt = unicycle_ode(t,x,u)
    % parameter initialization
    omega=1;
    ga=0.0125;

    dxdt = zeros(2,1);
    dxdt(1)=x(2);
    dxdt(2)=-omega*omega*(sin(x(1))+u*cos(x(1)))-2*ga*x(2);
end

